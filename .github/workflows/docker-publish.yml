name: Build and Push Docker Image

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: nexuscr.factus.dk/chess-combat

permissions:
  contents: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: chess
          POSTGRES_PASSWORD: chess
          POSTGRES_DB: chess
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Nexus Docker registry
        uses: docker/login-action@v3
        with:
          registry: nexuscr.factus.dk
          username: ${{ secrets.NEXUS_USER }}
          password: ${{ secrets.NEXUS_USER_PW }}

      - name: Set DATABASE_URL env var
        run: echo "DATABASE_URL=postgresql://chess:chess@localhost:5432/chess" >> $GITHUB_ENV

      - name: Install Python and dependencies
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Database Migration
        run: |
          echo "Running database migration..."
          python migrate_db.py
          echo "Migration completed successfully!"

      - name: Run all tests (unit + integration)
        run: |
          pytest tests/ -v
          echo "Running version-specific tests..."
          pytest tests/test_version.py -v

      - name: Get and bump version
        id: get_version
        run: |
          if git describe --tags --abbrev=0 2>/dev/null; then
            VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
          else
            VERSION=$(grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+' VERSION.txt)
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH+1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo $NEW_VERSION > VERSION.txt
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push new version tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add VERSION.txt
          git commit -m "Bump version to ${{ steps.get_version.outputs.version }}" || echo "No changes to commit"
          # Remove tag locally and remotely if it exists
          git tag -d v${{ steps.get_version.outputs.version }} || true
          git push --delete origin v${{ steps.get_version.outputs.version }} || true
          git tag v${{ steps.get_version.outputs.version }}
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin main --tags

      - name: Set build timestamp
        id: build_timestamp
        run: |
          BUILD_TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          echo "timestamp=$BUILD_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Build timestamp set to: $BUILD_TIMESTAMP"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            BUILD_TIMESTAMP=${{ steps.build_timestamp.outputs.timestamp }}
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}

      - name: Install Helm push plugin
        run: |
          helm plugin install https://github.com/chartmuseum/helm-push.git || echo "plugin already installed"

      - name: Update Helm chart version and image tag
        run: |
          VERSION=${{ steps.get_version.outputs.version }}

          # Update Chart.yaml with new version and appVersion
          sed -i "s/^version:.*/version: $VERSION/" ./deployment/chess-combat/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"$VERSION\"/" ./deployment/chess-combat/Chart.yaml

          # Update values.yaml to use the specific image tag (replace any existing tag)
          sed -i "s/tag: \".*\"/tag: \"$VERSION\"/" ./deployment/chess-combat/values.yaml

          echo "Updated Helm chart to version $VERSION"
          echo "Chart.yaml:"
          cat ./deployment/chess-combat/Chart.yaml
          echo "Values.yaml image section:"
          grep -A 3 "image:" ./deployment/chess-combat/values.yaml

      - name: Commit updated Helm chart files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add ./deployment/chess-combat/Chart.yaml ./deployment/chess-combat/values.yaml
          git commit -m "Update Helm chart to version ${{ steps.get_version.outputs.version }}" || echo "No chart changes to commit"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin main

      - name: Package Helm chart
        run: |
          helm package ./deployment/chess-combat --destination ./deployment/chess-combat

      - name: Push Helm chart to Nexus
        env:
          HELM_REPO_URL: https://nexus.factus.dk/repository/helm/
          HELM_USERNAME: ${{ secrets.NEXUS_USER }}
          HELM_PASSWORD: ${{ secrets.NEXUS_USER_PW }}
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          CHART_PACKAGE="./deployment/chess-combat/chess-combat-$VERSION.tgz"

          echo "Looking for chart package: $CHART_PACKAGE"
          if [ -f "$CHART_PACKAGE" ]; then
            echo "Uploading $CHART_PACKAGE to Nexus"
            curl -u $HELM_USERNAME:$HELM_PASSWORD --upload-file $CHART_PACKAGE ${HELM_REPO_URL}chess-combat-$VERSION.tgz
            echo "Successfully uploaded Helm chart version $VERSION to ${HELM_REPO_URL}chess-combat-$VERSION.tgz"
          else
            echo "Chart package not found, listing available files:"
            ls -la ./deployment/chess-combat/
            exit 1
          fi
